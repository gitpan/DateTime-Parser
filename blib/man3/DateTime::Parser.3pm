.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DateTime::Parser 3pm"
.TH DateTime::Parser 3pm "2007-10-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
DateTime::Parser \- Locale aware Parser for DateTime
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&        $obj = new DateTime::Parser();
\&        OR
\&        $obj = new DateTime::Parser('%d. %B %Y');
\&        OR
\&        $obj = new DateTime::Parser('%d. %B %Y','de\-AT');
.Ve
.PP
.Vb 1
\&        my $date1 = $obj\->get_time('5. Oktober 2007');
.Ve
.SH "DESCRIPTON"
.IX Header "DESCRIPTON"
This module provides a convinient function to parse localaized datetime
stings into DateTime objects. You just need to supply the used locale
and a strftime string describing the pattern.
.SH "USAGE"
.IX Header "USAGE"
.Sh "new([\s-1LOCALE\s0])"
.IX Subsection "new([LOCALE])"
.Vb 1
\&        my $obj = DateTime::Parser\->new();
.Ve
.PP
.Vb 1
\&        my $obj = DateTime::Parser\->new('%d. %B %Y');
.Ve
.PP
.Vb 1
\&        my $obj = DateTime::Parser\->new('%d. %B %Y','de\-AT');
.Ve
.PP
.Vb 2
\&        my $locale = DateTime::Locale\->get_locale('de\-AT');
\&        my $obj = Config::Class\->new('%d. %B %Y',$locale);
.Ve
.PP
Creates a DateTime::Parser object and returns it. Takes the strftime format
string and the locale as an optional argument. If no locale is provided it will be
taken from \f(CW\*(C`DateTime\-\*(C'\fR\fIDefaultLocale()\fR>. If the format string is omitted then the 
\&\f(CW\*(C`medium_date_format\*(C'\fR from the currently used locale will be used.
.PP
The locale may be a DateTime::Locale object or a locale name as supplied to
\&\f(CW\*(C`DateTime::Locale\-\*(C'\fRget_locale>
.Sh "\fIget_locale()\fP"
.IX Subsection "get_locale()"
Returns the currently used DateTime::Locale object.
.Sh "set_locale(\s-1LOCALE\s0)"
.IX Subsection "set_locale(LOCALE)"
Sets the currently used locale. Accepts the name of the locale or a DateTime::Locale object.
.Sh "set_pattern(\s-1PATTERN\s0)"
.IX Subsection "set_pattern(PATTERN)"
Sets the pattern. The format string can be any string containing DateTime 
\&\*(L"strftime Specifiers\*(R" 
.Sh "get_time(\s-1TIMESTRING\s0)"
.IX Subsection "get_time(TIMESTRING)"
.Vb 1
\&        my $datetime = $obj\->get_time('5. Oktober 2007')
.Ve
.PP
Parses the given datetime strings and returns a datetime object. If the string cannot be
parsed the method returns undef. 
.Sh "strftime Specifiers"
.IX Subsection "strftime Specifiers"
This module can parse all existing strftime specifiers and also a couple of method 
specififiers (\f(CW\*(C`%{method_name}\*(C'\fR), but it can only use some of them to construct
a datetime object, since not all specifiers are easily (or event at all) reversible.
.PP
\fISupported DateTime Methods\fR
.IX Subsection "Supported DateTime Methods"
.Sp
.RS 2
* item ce_year
* item year
* item month, mon
* item day,mday 
* item hour
* item minute
* item second
* item time
* item ymd
* item mdy
* item dmy
* item month_name
* item month_abbr
* item day_name
* item day_abbr
* item hour_12
* item quarter
* item quarter_name
* item quarter_abbr
* item millisecond
* item microsecond
* item nanosecond
* item datetime
* item iso8601 
* item hms
* item offset
* item epoch
* item time_zone_long_name
.RE
.PP
\fIUnsupported DateTime Methods\fR
.IX Subsection "Unsupported DateTime Methods"
.Sp
.RS 2
* item era_abbr
* item christian_era
* item secular_era
* item day_of_quarter
* item doq
* item year_with_era
* item year_with_christian_era
* item year_with_secular_era
* item hour_1
* item hour_12_0
* item fractional_second
* item week
* item week_year
* item week_number 
* item jd
* item mjd
* item hires_epoch
.RE
.PP
\fIReversible Strftime Specifiers\fR
.IX Subsection "Reversible Strftime Specifiers"
.PP
Only the specifiers clearly indicating a single timezone, year, month, day, hour, 
minute, second or nanosecond can be used to construct a DateTime object. 
.SH "KNOWN BUGS & LIMITATIONS"
.IX Header "KNOWN BUGS & LIMITATIONS"
This module cannot work with dates from \s-1BC\s0 era.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 4
\&    Maroš Kollár
\&    CPAN ID: MAROS
\&    maros [at] k\-1.com
\&    http://www.k\-1.com
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
DateTime::Parser is Copyright (c) 2006,2007 Maroš Kollár.
All rights reserved.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The DateTime module by Dave Rolsky.
